Today
 - setup icons
 	- pick icons
 	- set them up
--- Calendar
	---- idea - Doubling Columns: consider doubling number of columns for more granular control on calendar column width
	---- idea - Relative orientation on the side: relative orientation in days/month on the side (see branch calendar.relative-dates-on-the-side)
	+---- idea - Total Upcoming Events: display "upcoming events" count along with "total events" under calendar name
	---- idea - Collapsed mode for Past Events: use automatic height for events in the past (http://screencast.com/t/Fxq74ZzNxdGl) this would save space for non-important events that passed, we may want to make the "collapsible", click to expand-collapse
	---- idea - Collapsed mode for past empty Weeks: set past empty weeks to minimal height possible
	+----- bug : on small sizes weekday names do not fit, e.g. "MON" becomes to wide
	----- bug: on small sizes weekdays need to adapt as well as crads, when "TODAY" is during weekday it pushes content out of edges
	----- bug: http://screencast.com/t/2KaJTM9RujmR when Last/First day of month happens to be "TODAY"
		- how to fix: leave TODAY for large sizes and use circled day for the rest like Apple Calendar does
	--- Scroll
		- higlight current month when scrolled to it: like trello Calendar https://trello.com/b/LfWc01La/www-teamsanjose-org/calendar/2016/01
		- use https://github.com/taion/react-router-scroll: https://github.com/reactjs/react-router/blob/master/upgrade-guides/v2.0.0.md#using-scroll-behavior
	
	!----- immediate todo
		+- rename index1.html to something meaningful
		--- after MTB release
			- hosted graphite logo
			-- use React SideEffect for Document Title
				- client side
				- server side
				- set document title to calendar name for Calendars
			+- consider adding month label to every other week's sunday before day: Sunday is never minimized
			- mark visited cards (store this in localStorage for now)
			- show which card has Promoter URL and which one doesn't
			.-(low) show USAC non USAC events
			- test and set up Sentry as discribed here https://github.com/getsentry/demo-express/blob/master/index.js
			- create Footer component
			- Events todo:
				//TODO: memoize calculated totals since collection is immutable
				//TODO: get total before date
			- extract wendor to DLL: http://engineering.invisionapp.com/post/optimizing-webpack/ this can speed up incremental builds even more
		- change Promoter in event data from string to object: name, url, etc
		+- re-use RoundBadge in calendar
		+- set card size to be in Pixels, so it's doesn't shrink when base font-size shrings and stays in a grid: since grid does not use REMs and uses px
		- replace pure-render mixing on: https://facebook.github.io/react/docs/shallow-compare.html
			- consider Recompose: https://github.com/acdlite/recompose
		-- decapitalize ALL CAPS events, make them sentence case					
		- test layout for multiple events at the same day, but different sizes of cards
		- test layout with variable height of events, so we don't waste vertical space
		+- size 4 may not make sense on XL screen: stick to 3?
		- try and see if longest event fits all sizes and manually adjust text size
		+- change base font size to 6 or 7 for x-small screens
			- test in on mobile
		--- experiment with ReactSticky header 4.0
			- try https://app.trainingpeaks.com/ approach: they implement scroll inside, locking down header
			- try https://github.com/react-bootstrap/react-overlays/blob/master/src/Affix.js

	--- Redux Setup
		!-- learn 
			- https://github.com/raisemarketplace/redux-loop
			- https://github.com/jarvisaoieong/redux-architecture
			- https://github.com/ahdinosaur/inu
		- maybe set webpack's root to one level up so we can reference shared from both client and server
		- server side setup
			+- basic store and routing support
			- window.__INITIAL_STATE
		- redux router
			+- set it up: https://github.com/reactjs/react-router-redux
			- move showAll/hidePast to be URL param of calendar and suppored by redux
		-- ecosystem
			- redux-undo: useful for ading/updating events
			+- redux-logger
			- redux-observable
			- ? redux-thunk: http://stackoverflow.com/questions/35411423/how-to-dispatch-a-redux-action-with-a-timeout/35415559#35415559
			- apollo-client

	--- NCNCA.org beta release
		- setup old NCNCA calendars (in particular 2015 one)
			- support for ?year param: could be 
			 -  : /caledars/ncnca/2015
			 -  : /calendars/ncnca?year=2016
			 -  : /calendars/ncnca-2015
			- make sure it's same as todays covering all links and notes
		- gather email and send out beta-testing message
	--- Filtering
		- deal with stage races and omniums (shoeld we support multiple event types? e.g. ['Stage Race', 'Criterim'])?
		- deal with clinics
	--- Event Details
		---- ideas
			- add "Reveal" like here http://screencast.com/t/sWzxWxykK7Fg: to show more event details and course description	
			- concept of material-like primary button (saves space): http://screencast.com/t/vuepHQaAaT01
		!----- immediate todo
			--- high priority
				+- rename "promoterUrl" in MTB to "websiteUrl"
				+----- BUG: icons slode down on buttons
				- replace "no flyer (yet?)" for past events to just no flyer
				- there is not EVENT WEBSITE for NCNCA races, only promoter
				- when permit number is present => calculate results url automatically
				- when flyer number is present but flyer url is not calucate it automatically:https://www.usacycling.org/events/getflyer.php?permit=2016-1938 check how many cases like that do we have
				- fix on results button click
				- add "usacEvent" property true/false: so when  there is no permit number we would at least able to mark this event as USAC sanctioned
				----- BUG Boostrap: hide past events link doesn't appear as a link
				----- BUG Boostrap: debug checkboxes are broken
				----- BUG Flyer Types: certain MTB events have non-pdf in pdf link
				- fix: don't use modals on touch devices, as of now card that opens in separate window doesn't work on mobile due to min size, but when min size is removed it becomes narrower since it won't fit container 
				- make sure generic calendars return 404 when ID is incorrect
				- make events crawlable (add <a> tag to a card with proper href)
				- add external link indicator to all links (icon)
				+- add sheetsu logo (logo in email)
				- add UsacLogo to usac event: ones that have permitId are usac ones for sure, but it's more reliable to have "usacEvent: true" set maually so we know for sure
				- add permit number link as per mock
				- add primary calendar id to every event
				- get calendar into "even details" component so we can use timezone
			- trim urls for Event Details: for evnt website, do what Product Hunt does, fix lthe lengths of the url
			- normalize series to it's own collection?
			- Change Registration button ICON based on website: BikeReg, Eventbirte, USA Cycling
			- center calendar name
		 	---- (optimization) during event creation build index of occurence of "road race" inside event: and other words to speed up rendring
		 	---- (optimization) isomorphic-fetch should point to node-specific dependency for node webpack bundles
			- let event contain multiple types: like [Stage Race, Criterium] or [Criterium and Time Trial]
				- alternative implementation: partOfStageRace: true, false and don't allow multiple types
				- mutiday event?:
			- add support for multiday events
				- PROPOSED solution: defenitely there must be one event for one id, but then it may have array of dates if the event got moved it should have a link to event id that got created in place of it 
			- make Event.date to be non-moment object, since that is not how it's going to come from the server: also this is not serializable
			+----- BUG: isoWeeksInYear doesn't cover full range of weeks for 2017 it's -1 week :(
			----- BUG: relative date for next day assumes that events starts at midnight, which usually is not true, it needs to be set to 8AM (since no evetns start earlier)
			----- BUG: media query for TopNavbar to have lef-right padding of 2rems on mobile to be aligned with 
			content
			----- BUG: drift interferes with modal allowing to drag it on the left
			----- BUG: background still scrolls on iOS
				- woraround: do not open EventDetails on mobile as modal
			--- Flyier
				+- use google viewer in iFrame: https://docs.google.com/viewer?embedded=true&url=https://www.usacycling.org/events/getflyer.php?permit=2016-1578
			--- MAP
			    -- json event marker color should be of the event color type
			    - make events composite and state/city bold as per mock
			    - on mobile show mobile-google maps URL
			---- consider rendering event details on popup but wighout calendar behind it even for direct URLS
			    - positive: this simplifies logic
			    - positive: allows go close it and go back to default calendar
			    - negative: we can't show extra stuff on event details page
				-- show "circle" on map when no precice location is avalable: https://developers.google.com/maps/documentation/javascript/examples/circle-simple (this way it's immediately obvious)
		 -- setup proper routing hierarhy
			- move Calendars to redux store
				- move Events to the store and normalize Calendar and Events
				- make Calendar to take params from a router (url)
				- make MTB calendar part of Store and introduce concept of "Named calendar" vs plain id
				- redux-actions when action creator function is not defined captures syntatic events, so identity function by default is confusing
		 -- Modal Effects
			- http://tympanus.net/Development/ModalWindowEffects/
		 -- optimizations
			+- do what Product Hunt does: clicking on any link in a list https://www.producthunt.com/ renders a kind of modal you can close, but if you then go directly to that url it's getting rendered without background (which drastically improves performance)
		 -- BEFORE RELEASE
		 	- install webpack-validator: https://github.com/js-dxtools/webpack-validator
			- primary calendar concept for an event: each event can belong to any number of calendars, but only one can be it's primary where it was created
			- decide on event urls should it be:
				- under primary calendar: /calendars/cal-12312/events/evt-1233
				- under root: /events/evt-234324
				- under multiple links with canonical being from primary calendar
		 +- refactor event color by type
		 +- add not and other icons on event details
		 +- experiment with map marker and location label  color to be of the same one with event type                                                                                   
		 +----- BUG: today is shown in black
		 +-- Put Events to Redux Store
			+----- BUG: re-render after popup is now 100ms (slow)
			+- use "why did you update" for quick perf look
			+- use simple object vs js Map()
				- for now duplicate creation in events.js
			+- connect EventDetails
			+- connect Calendar
				- user reslect for querying getTotalFrom
			+- make sure they are loaded on the server
		 +----- BUG: 3 event badges does't work on mobile iPhone 6 and below
	+--- NCNCA 2017 Draft: https://github.com/Restuta/rcn.io/issues/135
		+- add sheetsu logo (logo in email)
		+- call sheetsu https://sheetsu.com/apis/v1.0/1c20d0db4562 to get events
		+- show different status for events that are in draft mode
			- group id
			- notes
 	--- design a card UI
 		-- ideas
 			- try different pattern for event type color stipe: like here http://codepen.io/xhepigerta/pen/oxxQaw
 			but horizontal, it's also super nice that it moves on hower
 		!----- immediate todo
 			+----- bug: back button doesn't open popover on Calndar page, it's due to history.goBack()
 			- SSR for Redux and Router: 
 				- https://github.com/davezuko/react-redux-starter-kit/blob/master/src/main.js
 				- https://github.com/StevenIseki/react-router-redux-example/blob/master/serverProd.js
 			-- custom shallow render for calendar component
 				- do not re-render on location change
 			- install https://github.com/Va1/browser-sync-webpack-plugin: for page reloads
 			- update to https://github.com/gaearon/react-hot-boilerplate/pull/61
 			- use material design colors and play with not as prominent colors as they are currently 
 			- move Event.jsx paddings calculations to SCSS and assign classes by size of the card: currently only
 			- for small columns of size 1 consider setting height to double of actual to fit more: since we always have space there
 			text is supported
 			+--- figure out ideal heith based on baselines
 			+---- transpan cards on example, so row represents sreen version: actually think if this make sense since maybe "size" matters and row should represent "small" in terms of size
 			+- round height to nearest multiple of line height
 			.- (not sure this has value, since RR are not that different in lenght)for distance make badge to have different size depending how long is the race
 			+-- create square (2px rounding) badge variation
 			- //TODO bc: explain this formula (const cardHeightRem = width * baseHeight - width - 1 )
 			+-- rewrite calculation of card heights using formula
 			+-- try 1.7777 vs 1.5 card ratios
 			+- adaptive Event card or different components?: what is easier to maintain?
 				+- e.g. we need to show UI of the card differently based on size: the sizes can be pre-defined though
 					+- text should be moved down proprotionally to card size
 					+- try Roboto Condensed
 					+- try Open Sans Condensed
 					+- try Oswald
 			+- set assymetric padding (less on the sides, more from top to preserve the rythm)
 			- try Google Material Card design layout: https://www.google.com/design/spec/components/cards.html#cards-content-blocks
 			+- adopt flexbox
 			+- play with vh vw (veiwport related sizes) for card size
 			- create variations with text shadow on badges: text-shadow: 0 1px 0 rgba(0,0,0,.2);
 			-- create a 1-2 line card design, so we can show non-important events for imporant days this way: 
 				say we have a Sat which takes 4 culumns and we only interested in 1/3 events, there is no reason to show them full-size
 				- inspiration can be taked from TargetProcess: http://screencast.com/t/HpOkrTbi4ot
 			- create variation with different width of left colorful section (used to show event type)
 				- try really wide option that would also group event-type specific information: e.g. distance for RR, duration for crit, etc (http://screencast.com/t/ABpTSbxzP)
 			+- see dribble for Card UI inspiration
 		+- if calendar is going to take the whole page space, rethink 16 columns (this is easy)
 		- play with adaptive sizes: https://projects.invisionapp.com/d/main#/console/1638951/114305230/preview
 		-- make it responsive in React
 			- http://wicky.nillia.ms/enquire.js/: and a wrapper https://github.com/akiran/react-responsive-mixin
 		- use this from material UI for multiday events: http://screencast.com/t/NrvJMSHEJX (http://material-ui.com/#/components/lists)
 		- make better implementation of faded text, when text is too long: current one is not ideal and has few bugs
 			-- idea 1: mb use string.length to approximate if text fits
 			----- bug: overlay is shown when text doesn't actually have more lines left
 			----- bug: overlay is shown all the time, event when text is super-short
 			-- idea 2: make cards to take more vertical space
 				- :( breaks alignment
 			+-- idea 3: make text smaller
 			-- idea 4: fade text vertically, top to bottom, this makes it more obvious that there is more to read
 			+--- idea 5: try monspace font like so it's easy to calculate exact text length
 				- options on Google Fonts:
 					- Roboto Mono (10 variations nice!, 13px point size for 10px font)
 					- Inconsolata (2 variations, but more condensed, 16px point size for 10px font)
 					- Source Code Pro (7 variations, 13px point size for 10px font)
 					- Fira Mono (2 variations, 16px point size for 10px font)
 					.- (tried it looks not as good as Lato)
 			- it would be nicer to have overlay + "..."
 		- for one-column cards try really small text size: better then nothing
 		-- what if we go Apple Watch Style for card UI: e.g. we can use space more efficiently if we show circles around circles http://screencast.com/t/JajByOsfhtm


Mobile support
 - responsive font scale read: http://typecast.com/blog/a-more-modern-scale-for-web-typography
 ---- (IMPROVEMENT): double tap on mobile should close modal for faster browsing + educate people, instead of "esc" show "double tap" lable under close                                                     

After Boilerplate setup
	- setup Plop to generate files faster: https://github.com/amwmedia/plop
	- setup Git worflow effective for our team
		- proposed setup 1 (Github Flow):
			= leave master as production branch
				do not commit on master directly
				master is always deploayble
			= use dev branch for ongoing development: merge it to prod when deploy is needed
			= use feature branches for bigger features
		- proposed setup 2: https://about.gitlab.com/2014/09/29/gitlab-flow/
			= use production branch
			= work on master + feature branches
	- setup render vizualizer: https://github.com/spredfast/react-transform-render-visualize
	-- CI
		- setup mocha
			- write simple test for css class transforms
		+- setup travis CI
			+- use https://buildtimetrend.herokuapp.com/ for build time trends
	+-- atoms (UI)
	-- webpack
		- setup url loader (see etse)
		+- extract text plugin for CSS for prod
		+- autoprefixer
		- Scoping hot loader only to components directory: see if it's even an option and if it would speed up incremental rebuild times as mentioined here https://github.com/webpack/webpack/issues/1574
		- investigate if css-loader makes a difference: https://github.com/webpack/css-loader/issues/124
			- css-loader url=false (for dev?): https://github.com/jtangelder/sass-loader/issues/176#issuecomment-151565911
		- investigate how CSS affect build times:there is some evidence that "how you structure CSS" affects build times (https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538) https://github.com/jtangelder/sass-loader/issues/176
		- decide which of 3 ways of loading css we should use: https://github.com/jtangelder/sass-loader/issues/164#issuecomment-150947538

	- consider "react-document-title" package
	-- Redux
		- condiser simpler actions as next step: https://github.com/pauldijou/redux-act
	-- server	
		- make sure hot reloading server is not runing on prod
		- setup Relay and GraphQL from examples
		- setup logging and colorful logger
		- setup middlewares
		- setup error handler and API request logger middleware
		-- Setup Relay
			- example: https://github.com/fortruce/relay-skeleton
	- setup other react stuff from este.js
		+- make all components pure
		- figure out how to make function component pure


Pre-production
--- MTB release
	-- make sure public path is correct so we can see source maps in prod
	- setup 404
-- SEO
	- meta-tags
		- look around in general e.g. hotelstonight and do alike
		- for Twitter: https://dev.twitter.com/cards/types/summary

-- Webpack related
	+----- setup parralel build of webpack client and webpack server
	+- read "Building for production section": http://www.pro-react.com/materials/appendixA/#buildingfor
	+- add Autoprefixer
	+- use HtmlWebpackPlugin with index.html template: see http://www.pro-react.com/materials/appendixA/
	+- consider React-Icons: https://github.com/gorangajic/react-icons, allows to do ES6 imports to import only needed things
	- currently index.html for prod: doesn't include js and css files bundled	
		- consider setup auto-index html: https://github.com/ampedandwired/html-webpack-plugin
			- also has nice example of usage of HTML Webpack Plugin: https://github.com/mxstbr/react-boilerplate/blob/master/makewebpackconfig.js
		- or take approach with node server that just uses: index.js as enry point and all html is generated by react
			- read this related https://github.com/webpack/webpack/issues/536
	+- setup hashes for output: like assets/bundle.[hash].js
	- setup minifications of js, css and html
		- one of the prod config examples with html minification: https://github.com/mxstbr/react-boilerplate/blob/master/makewebpackconfig.js
	+- enable React compiler optimizations (Babel 5.8.24): https://facebook.github.io/react/blog/2015/10/07/react-v0.14.html#compiler-optimizations
	
	- use app cache and service workers: https://github.com/NekR/offline-plugin
		- watch: https://www.youtube.com/watch?v=TGwjgmAqNRo&feature=youtu.be
		- read: http://www.html5rocks.com/en/tutorials/appcache/beginner/
		- read: http://www.html5rocks.com/en/tutorials/service-worker/introduction/
		- manifest.json: https://developer.chrome.com/multidevice/android/installtohomescreen
		- examples with all above: https://github.com/mxstbr/react-boilerplate
+- make sure we load only required Lato and Oswald variations
--- Server Sider Rendering
	+-- I may need assets.json, but not sure how to match them with HtmlPlugin
	+---- Approaches
		+- Require Webpack setup
			+- fake loaders: https://medium.com/@dferber90/enabling-assets-for-server-side-rendering-in-webpack-a843a5ebeb0c#.eexh6kmte
		+- webpack-isomorphic-tools: overall feel is complex and codebase is not clean, but used by Este and some others
		+- conditional require: `if Env.IsBrowser` kind of thing
		+- custom babel plugin that get rids of imports and requires:
			- experiment with AST here: http://astexplorer.net/
			- not sure if it will emit same HTML
			- doesn't cover file and url loaders
	- watch: https://www.youtube.com/watch?feature=player_embedded&v=PnpfGy7q96U
	- read: https://hashnode.com/post/serve-content-faster-with-react-cilrwgc7w00cd0q53uta3399i?utm_content=buffer5f0d4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer
	- read: https://jakearchibald.com/2016/streams-ftw/#streaming-results
	- read https://medium.com/@ryanflorence/welcome-to-future-of-web-application-delivery-9750b7564d9f#.dq649b347
	-- setup Server Side rendering like etse js
		- este uses react component to render HTML document called 'html.react.js'
	- how to from React Rouer wiki https://github.com/rackt/react-router-tutorial/blob/start/lessons/11-productionish-server.md
		+- split dev-server and prod-server somehow (with config file that we import and do "if dev?")
			- setup server for API and hot reload combined (like estejs)
		- if-env of particular interest
		+- minification and gzipping
			+- - setup compression middleware (like estejs)
		- create webpack config for SS rendering (https://github.com/rackt/react-router-tutorial/blob/start/lessons/13-server-rendering.md)
-- Move debug CSS code to React components
	- move baseline grid to Component
	- move display container edges to Component
	- create BootstrapGridDisplayer react component
	- disable bundling of debug tools for prod
-- Optimizations
	- figure out what JS is loaded based on source-maps (https://github.com/danvk/source-map-explorer)
	- tweak fast-click: https://gist.github.com/gajus/bbf06ea2e37047b01e70
	- React perf. optimization: http://benchling.engineering/performance-engineering-with-react/
	- use https://github.com/typekit/webfontloader to load Types
	- optimize CSS Delivery https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery
	- consider using https://github.com/bvaughn/react-virtualized for infinite calendar list
	- only use iconst that are neeeded
		- eigher react-icons
		- or iconmoon (of similar) to create custom font from the ones we use
	- optimize critical rendering path, put certain CSS with webpack into HTML
--- Mobile
	- handle orientation change (we are not re-redering on it)
	- get rid of 300ms delay: https://github.com/zilverline/react-tap-event-plugin

Not Today, but not never!
	-- Github
		- setup Changelog Generator https://github.com/skywinder/Github-Changelog-Generator
	-- Tweak Bootstrap
		- consider WFT-Form feilds http://wtfforms.com/
		- setup different gutter per breakpoint: https://github.com/twbs/bootstrap/issues/11564
		- setup larger breakpoint to support really wide displays
	-- Fonts and Typography
		+- Try Bebas Neue instead of Oswald
		+- try LEAGUE GOTHIC instead of Oswald (OSS font)
		- use larger base font size for hi-dpi displays with low device-pixel ratio: e.g. my 25" 2500x1440 display qualifies, my retina macbook doesn't. 14px font looks larger on mac and smaller on mentioned monitor
	-- SVG and Icons
		- use IcoMoon to convert font's to SVG
		- combine SVG to a sprite and user refs
			- https://github.com/kisenka/svg-sprite-loader
			- https://github.com/mrsum/webpack-svgstore-plugin
		- user <sybmbol> instead of <g>: https://css-tricks.com/svg-symbol-good-choice-icons/
	- print about Flux https://pbs.twimg.com/media/CDyAQ-BW0AESYP1.png
	- go through simple Redux eample: https://github.com/jackielii/simplest-redux-example/blob/master/index.js
	- setup webpack for dev
		- and nyan loader like in este
	- play with date for humans: https://github.com/matthewmueller/date
	- play with X-Ray (for scraping): https://github.com/lapwinglabs/x-ray
	- figure out how to make Funtional Components Pure (pure Render mixin?)
	- move webpack config to be ES6
	-- play with Browserify, this claims it super-fast for rebuilding: http://christianalfoni.github.io/javascript/2014/08/29/choosing-the-correct-packaging-tool-for-react-js.html
		- hot-reload: https://github.com/milankinen/livereactload
		- browserify for webpack users: https://gist.github.com/substack/68f8d502be42d5cd4942



Public Mail Page
 - consider this for engaging animation: http://animaticons.co/downloads/essential-plus/, there is nice calendar and map icons

Before 1.0 Release 
	- use web-loader to for fonts: https://github.com/typekit/webfontloader
	woould allow to prevent FOUT (Before 1.0 Release 
	https://github.com/typekit/webfontloader), test it with artificial trottling
	- review TimeKit: [Timekit](http://timekit.io/) - availability and scheduling API
	- use for homepage: https://www.typewolf.com/site-of-the-day/fonts/playfair-display


Webpack Times
	-- CodePen to calculate avg times: http://codepen.io/Restuta/pen/ZbLqyX?editors=101
	- avg rebuild times
		- node 4.1.1 and npm 2.14.4: 245ms
		- node 4.1.1 and npm 3.3.4: 209ms - 227ms
	- boostrap SASS adds ~600ms to rebuild times


Done
	+- finish basic setup of hot reload boilerplate
		+- eslint
		+- add css/sass processing: monitor rebuild times
			+- configur sass to be expanded for dev
		+- add Bootstrap 
			+- try BS4 and non-compiled version, see if it adds a lot of overhead: in terms of compilation time
		+- setup react 0.14
		
		+- static index.html for now (server side render later)
	+- move boilerplate under rcn.io
		- rename stuff in package.json
	+!- upgrade to react 0.14 
	+- build a grid
	 	+- tweak columns so they are better multplies of...: https://github.com/twbs/bootstrap/issues/13120
	 	+- pick number of columns and gutter size
	 	+- see if we should use fluid ui
	 	+- consider use of all 16 columns for g (more space for cards)
	 +-- build basic Bootstrap components
	 	+- row
	 	+- column
	 	+- mb use cusom gutters per breakpiont: https://github.com/twbs/bootstrap/issues/11873
	+- setup typographic scale
		+- setup body scale
	 	+- setup header scale
	 	+- combine two above scales into one
	 	+- try lato line height of 1.36 on fonts selection branch: as per http://www.imarc.com/blog/750-
	 	+- try horizontal guidelines like here: http://goldilocksapproach.com/demo/
	 	using_the_golden_ratio_with_typography
	 	+- try with font's selected: text-rendering: optimizeLegibility;
	 		+- on fonts branch
	 		+- lato specifically
	 	+- see if we need to set rems to match whole pixels like here (http://beta.gridlover.net/projects/74): currently we calculate it with SASS
+-- CSS
 	+- comile bootstrap and use compiled version
 	+- add Autoprefixer: for prod? (maybe covered as part of webpck)
 	+- extract boostrap to separate branch/folder so we can tweak, compile and reuse
 		+- should be able to run compile in one simple command and get updated version of CSS in a project ready to be commited
 	+- setup PostCSS with SASS-like plugins
 		+- compare compilation time to SASS

 		+- revert webpack.prod config to real prod settings
				-- invstigate why it builds fast with current ones
			+- figure out on the server screen size (mobile/non-mobile)
			+- make sure rendering works automatically when we can't figure out screen size: eg set sizes to 100% by passing prop "autoSizeContainer" and teaching components to adjust
			+- refactor server
			+- setup home page
			+- setup analytics
			+- setup Smooch
			+- favicon
			.-(not sure what is it) responsive card size based on landscape portrait
			+- setup proper URLs
			+!- heroku timezone is different from UTC, this leads to differnet HTML being rendered, set it per calendar?
			+!- future events count is incorrect
						+-- deployments
				+- move production branch to master
				+- setup stage environment
				+- configure Segment to use different app ids for HEAP for dev/prod
		+- use "Feb 1" instead of first "1" for February and also "Jan 31" instead of "31" as last one
		+- container edges are broken (after reaload checkbox is not honored)
		+- re-consider card width calculations
			+- center cards within day of week using flexbox
			+- currently they are exact, which causes painful rounding erros and misalignments
				+-- possible solusions
					+- use 100% for width
					+- substract 1-2px so visually cards occupy same space
