const path = require('path')
const express = require('express')
const webpack = require('webpack')
const webpackHotMiddleware = require('webpack-hot-middleware')
const webpackDevMiddleware = require('webpack-dev-middleware')
const config = require('../../webpack.config.dev')
const constants = require('../../webpack/constants')
import { createMemoryHistory, match, RouterContext } from 'react-router'
import configureStore from 'shared/configure-store.js'
import { renderToString } from 'react-dom/server'
import { syncHistoryWithStore } from 'react-router-redux'
// import routes from '../../dist-server/app.server.bundle'
import routes from '../../dist-server/app.server.bundle'
import React from 'react'
import { Provider } from 'react-redux'
import { ContainerWidth } from '../client/styles/grid'
import device from 'express-device'

const app = express()
const compiler = webpack(config)

app.use(device.capture({ parseUserAgent: true }))

app.use(webpackDevMiddleware(compiler, {
  noInfo: true,
  publicPath: config.output.publicPath,
  output: {
    path: '/'
  },
  stats: {
    colors: true
  }
}))

app.use(webpackHotMiddleware(compiler))

const Wrapper = props => {
  const buildCreateElement = containerW => (Component, props) => <Component {...props} containerWidth={containerW} />
  const { containerWidth, store } = props

  return (
    <Provider store={store}>
      <RouterContext {...props} createElement={buildCreateElement(containerWidth)} />
    </Provider>
  )
}

const getContainerWidth = deviceType => {
  const typeToWidthMap = {
    phone: ContainerWidth.XS,
    tablet: ContainerWidth.MD,
    desktop: ContainerWidth.XL,
    //other
    bot: ContainerWidth.LG,
    car: ContainerWidth.SM,
    tv: ContainerWidth.MD
  }

  //for undetected using most common resolution that would fit most devices
  return typeToWidthMap[deviceType] || ContainerWidth.MD
}

const serveHtmlFromFileSystem = (compiler, fileName, response, next, req) => {
  compiler.outputFileSystem.readFile(fileName, (err, result) => {
    if (err) {
      return next(err)
    }

    if (process.env.SSR) {
      const memoryHistory = createMemoryHistory(req.path)
      //TODO: setup data fetching https://github.com/StevenIseki/react-router-redux-example/blob/master/serverProd.js
      // it uses "fetchData" async actions in all wrapper components, not sure this is ideal approach for us
      const store = configureStore()
      const history = syncHistoryWithStore(memoryHistory, store)

      match({history, routes, location: req.url}, (error, redirectLocation, renderProps) => {
        const containerWidth = getContainerWidth(req.device.type)

        const layout = result.toString()
        const renderedContent = renderToString(<Wrapper {...renderProps} containerWidth={containerWidth}
                                                        store={store}/>)

        const html = layout.toString().replace('<div id=\'root\'></div>', `<div id="root">${renderedContent}</div>`)

        // console.log(html)

        response.set('content-type', 'text/html')
        response.send(html)
        response.end()
      })
    } else {
      response.set('content-type', 'text/html')
      response.send(result.toString())
      response.end()
    }
  })
}

//explicitly serving all .dll.js since  they are not handled by webpack dev server automatically since are not part
  //of the current webpack build (dlls are separate webpack build)
app.get(/\.dll\.js$/, (req, res) => {
  const filename = req.path.replace(/^\//, '')
  const filePath = path.join(process.cwd(), filename)
  res.sendFile(filePath)
})

//serving different index.html for widgets
app.get('/widgets*', function(req, res, next) {
  const filename = path.join(compiler.outputPath, '/widgets/index.html')
  serveHtmlFromFileSystem(compiler, filename, res, next, req)
})

//serving different index.html for widgets
app.get('/admin*', function(req, res, next) {
  const filename = path.join(compiler.outputPath, '/admin/index.html')
  serveHtmlFromFileSystem(compiler, filename, res, next, req)
})

app.get('*', function(req, res, next) {
  //this reads index.html from webpacks file system which is "in-memory" in case of dev server
  //also note that "index.html" is generated by HtmlWebpackPlugin from template
  const filename = path.join(compiler.outputPath, constants.INDEX_HTML)
  serveHtmlFromFileSystem(compiler, filename, res, next, req)
})

app.listen(constants.DEV_SERVER_PORT, 'localhost', function(err) {
  if (err) {
    console.log(err) // eslint-disable-line  no-console
    return
  }

  console.info('Listening at http://localhost:' + constants.DEV_SERVER_PORT) // eslint-disable-line  no-console
})
